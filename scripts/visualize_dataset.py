#!/usr/bin/env python3
"""
Dataset Visualization Script for Paddy Disease Classification

T·∫°o c√°c bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ªØ li·ªáu hi·ªán t·∫°i:
- Ph√¢n b·ªë classes
- T·ª∑ l·ªá train/valid/test
- Sample images t·ª´ m·ªói class
- Th√¥ng tin th·ªëng k√™ chi ti·∫øt
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path
from PIL import Image
import random
import warnings

warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p style
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# ƒê·ªçc d·ªØ li·ªáu
def load_data():
    """ƒê·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu metadata"""
    df = pd.read_csv('data/metadata.csv')

    # Map t√™n class cho ƒë·∫πp h∆°n
    class_names = {
        'bacterial_leaf_blight': 'Bacterial Leaf Blight',
        'brown_spot': 'Brown Spot',
        'healthy': 'Healthy',
        'leaf_blast': 'Leaf Blast'
    }
    df['class_name'] = df['label'].map(class_names)

    print(" TH√îNG TIN DATASET")
    print(f"‚îå{'‚îÄ' * 50}‚îê")
    print(f"‚îÇ T·ªïng s·ªë samples: {len(df):,} ‚îÇ")
    print(f"‚îÇ S·ªë classes: {df.label.nunique()} ‚îÇ")
    print(f"‚îÇ Classes: {', '.join(sorted(df.label.unique()))} ‚îÇ")
    print(f"‚îî{'‚îÄ' * 50}‚îò")

    return df

def plot_class_distribution(df):
    """V·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªë c√°c classes"""
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))

    # 1. Bar chart t·ªïng quan
    class_counts = df['class_name'].value_counts()
    colors = sns.color_palette("husl", len(class_counts))

    axes[0, 0].bar(range(len(class_counts)), class_counts.values,
                   color=colors, alpha=0.8, edgecolor='black', linewidth=1)
    axes[0, 0].set_xticks(range(len(class_counts)))
    axes[0, 0].set_xticklabels([label.split()[-1] for label in class_counts.index],
                               rotation=45, ha='right')
    axes[0, 0].set_title(' T·ªïng s·ªë samples theo lo·∫°i b·ªánh', fontsize=14, fontweight='bold')
    axes[0, 0].set_ylabel('S·ªë l∆∞·ª£ng samples', fontsize=12)

    # Th√™m s·ªë li·ªáu tr√™n bar
    for i, v in enumerate(class_counts.values):
        axes[0, 0].text(i, v + 50, f'{v:,}', ha='center', va='bottom', fontweight='bold')

    # 2. Pie chart t·ª∑ l·ªá
    axes[0, 1].pie(class_counts.values, labels=class_counts.index, autopct='%1.1f%%',
                   colors=colors, startangle=90, wedgeprops={'edgecolor': 'white', 'linewidth': 2})
    axes[0, 1].set_title('ü•ß T·ª∑ l·ªá ph√¢n b·ªë c√°c lo·∫°i b·ªánh', fontsize=14, fontweight='bold')

    # 3. Bar chart theo split
    split_data = []
    for split in ['train', 'valid', 'test']:
        split_df = df[df['split'] == split]
        split_counts = split_df['class_name'].value_counts()
        split_data.append(split_counts)

    x = np.arange(len(class_counts))
    width = 0.25

    for i, (split, counts) in enumerate(zip(['train', 'valid', 'test'], split_data)):
        axes[1, 0].bar(x + i*width - width, counts.values, width,
                       label=split.upper(), alpha=0.8, edgecolor='black')

    axes[1, 0].set_xlabel('Lo·∫°i b·ªánh')
    axes[1, 0].set_ylabel('S·ªë l∆∞·ª£ng samples')
    axes[1, 0].set_title(' Ph√¢n b·ªë theo Train/Valid/Test', fontsize=14, fontweight='bold')
    axes[1, 0].set_xticks(x)
    axes[1, 0].set_xticklabels([label.split()[-1] for label in class_counts.index],
                               rotation=45, ha='right')
    axes[1, 0].legend()

    # 4. Heatmap class vs split
    class_split = pd.crosstab(df['class_name'], df['split'])
    sns.heatmap(class_split, annot=True, fmt=',', cmap='YlOrRd',
                cbar_kws={'label': 'S·ªë l∆∞·ª£ng samples'}, ax=axes[1, 1])
    axes[1, 1].set_title('üî• Heatmap: Class vs Split', fontsize=14, fontweight='bold')
    axes[1, 1].set_xlabel('Split')
    axes[1, 1].set_ylabel('Lo·∫°i b·ªánh')

    plt.tight_layout()
    plt.savefig('data_visualization.png', dpi=300, bbox_inches='tight')
    print(" ƒê√£ l∆∞u bi·ªÉu ƒë·ªì t·ªïng quan: data_visualization.png")

    return fig

def plot_sample_images(df, num_samples_per_class=3):
    """Hi·ªÉn th·ªã sample images t·ª´ m·ªói class"""
    fig, axes = plt.subplots(len(df['class_name'].unique()), num_samples_per_class,
                             figsize=(15, 12))

    classes = sorted(df['class_name'].unique())

    for i, class_name in enumerate(classes):
        # L·∫•y random samples t·ª´ class n√†y
        class_samples = df[df['class_name'] == class_name].sample(
            num_samples_per_class, random_state=42)

        for j, (_, sample) in enumerate(class_samples.iterrows()):
            try:
                # ƒê·ªçc ·∫£nh
                img_path = sample['path']
                img = Image.open(img_path)

                # Hi·ªÉn th·ªã ·∫£nh
                axes[i, j].imshow(img)
                axes[i, j].set_title(f"{class_name}\n({sample['split'].upper()})",
                                     fontsize=10, fontweight='bold')
                axes[i, j].axis('off')

            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh {img_path}: {e}")
                axes[i, j].text(0.5, 0.5, 'Image\nError',
                               ha='center', va='center', transform=axes[i, j].transAxes)

    plt.suptitle('üñºÔ∏è Sample Images t·ª´ m·ªói lo·∫°i b·ªánh', fontsize=16, fontweight='bold', y=0.98)
    plt.tight_layout()
    plt.savefig('sample_images.png', dpi=300, bbox_inches='tight')
    print("‚úÖ ƒê√£ l∆∞u sample images: sample_images.png")

    return fig

def plot_detailed_statistics(df):
    """Th·ªëng k√™ chi ti·∫øt h∆°n"""
    print("\n TH·ªêNG K√ä CHI TI·∫æT")

    # T√≠nh to√°n th·ªëng k√™
    total_samples = len(df)
    num_classes = df['label'].nunique()
    class_balance = df['label'].value_counts()
    split_balance = df['split'].value_counts()

    print("‚îå" + "‚îÄ" * 70 + "‚îê")
    print("‚îÇ" + " ".ljust(68) + "‚îÇ")
    print(f"‚îÇ T·ªïng s·ªë samples: {total_samples:,}".ljust(69) + "‚îÇ")
    print(f"‚îÇ S·ªë classes: {num_classes}".ljust(69) + "‚îÇ")
    print(f"‚îÇ Train/Valid/Test ratio: {split_balance['train']/total_samples*100:.1f}% / {split_balance['valid']/total_samples*100:.1f}% / {split_balance['test']/total_samples*100:.1f}%".ljust(69) + "‚îÇ")
    print("‚îÇ" + " ".ljust(68) + "‚îÇ")
    print("‚îú" + "‚îÄ" * 68 + "‚î§")
    print("‚îÇ CLASS DISTRIBUTION:" + " ".ljust(50) + "‚îÇ")
    print("‚îú" + "‚îÄ" * 68 + "‚î§")

    for label, count in class_balance.items():
        percentage = count / total_samples * 100
        bar_length = int(percentage / 2)  # Scale down for display
        bar = "‚ñà" * bar_length

        class_name = {
            'bacterial_leaf_blight': 'Bacterial Leaf Blight',
            'brown_spot': 'Brown Spot',
            'healthy': 'Healthy',
            'leaf_blast': 'Leaf Blast'
        }[label]

        print(f"‚îÇ {class_name:<25} {count:>6,} samples ({percentage:>5.1f}%) {bar:<20} ‚îÇ")

    print("‚îî" + "‚îÄ" * 70 + "‚îò")

    # Ki·ªÉm tra balance
    print("\n ƒê√ÅNH GI√Å BALANCE:")
    print(f"Standard deviation of class counts: {class_balance.std():.1f}")
    print(f"Coefficient of variation: {class_balance.std()/class_balance.mean()*100:.1f}%")

    if class_balance.std() / class_balance.mean() < 0.1:
        print(" Dataset kh√° c√¢n b·∫±ng!")
    elif class_balance.std() / class_balance.mean() < 0.2:
        print(" Dataset h∆°i m·∫•t c√¢n b·∫±ng")
    else:
        print(" Dataset m·∫•t c√¢n b·∫±ng nghi√™m tr·ªçng!")

    return class_balance

def analyze_image_properties(df, sample_size=100):
    """Ph√¢n t√≠ch k√≠ch th∆∞·ªõc ·∫£nh (n·∫øu c·∫ßn)"""
    print("\nüì∑ PH√ÇN T√çCH ·∫¢NH (Sample)")
    sample_paths = df['path'].sample(sample_size, random_state=42)

    widths, heights = [], []
    for path in sample_paths:
        try:
            with Image.open(path) as img:
                widths.append(img.width)
                heights.append(img.height)
        except:
            continue

    if widths and heights:
        print(f" K√≠ch th∆∞·ªõc ·∫£nh trung b√¨nh: {np.mean(widths):.0f}√ó{np.mean(heights):.0f}")
        print(f" K√≠ch th∆∞·ªõc ·∫£nh trung v·ªã: {np.median(widths):.0f}√ó{np.median(heights):.0f}")
        print(f" Min/Max: {min(widths)}√ó{min(heights)} / {max(widths)}√ó{max(heights)}")

        # T·ª∑ l·ªá aspect ratio
        aspect_ratios = [w/h for w, h in zip(widths, heights)]
        print(f" Aspect ratio trung b√¨nh: {np.mean(aspect_ratios):.2f}")
    else:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c th√¥ng tin ·∫£nh")

def main():
    """Main visualization function"""
    print(" B·∫ÆT ƒê·∫¶U VISUALIZE DATASET")
    print("=" * 60)

    # Load data
    df = load_data()

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig1 = plot_class_distribution(df)
    fig2 = plot_sample_images(df)
    stats = plot_detailed_statistics(df)
    analyze_image_properties(df)

    print("\n HO√ÄN TH√ÄNH VISUALIZATION!")
    print(" Files ƒë√£ t·∫°o:")
    print("  ‚Ä¢ data_visualization.png - Bi·ªÉu ƒë·ªì t·ªïng quan")
    print("  ‚Ä¢ sample_images.png - Sample images")

    plt.show()

if __name__ == "__main__":
    main()
